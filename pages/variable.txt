//1. Use Strict
//added in ES 5
//use this for Vanlina Javascript.
'use strict';

//2. Variable, rw(read/write)
//let(added in ES6)
let globalName = 'globale name';
{
    let name = 'jiyun';
    console.log(name);
    name = 'hello';
    console.log(globalName);
}
console.log(globalName);
console.log(name);

//var(don't ever use this!)
//var hoisting(move declaration from bottom to top)
//has no block scope

{
    age = 4;
    var age;
}
console.log(age);

//3. Constant, r(read only)
//favor immutable data type always for a few reasons;
//- security
//- thread safety
const daysInWeek = 7;
const maxNumber = 5;

//Note!!
//Immutable data types : primitive types, frozen objects(i.e. object.freeze())
//Mutable data types : all objects by default are mutable in JS
//Favor immutable data type always for a few reasons :
//- security
//- thread safety
//- reduce human mistakes

//4. Variable types
//primitive, single item : number, string, boolean, null, undefined, symbol
//object, box container
//function, first-class function

const count = 17;
const size = 17.1;
console.log(typeof(count));
console.log(typeof(size));

//number - special numeric values : infinity, -infinity, NaN
const infinity = 1/10;
const negativeInfinity = -1/10;
const nAn = 'not a number' /2;
console.log(infinity);
console.log(negativeInfinity);
console.log(nAn);

//bigInt (fairly new, don't use it yet)
const bigInt = 123456789123456789123456789123456879n;
console.log(bigInt, typeof(bigInt));
Number.MAX_SAFE_INTEGER;

//string
const char = 'c';
const brendan = 'brendan';
const greeting = 'hello '+ brendan;
console.log(greeting, typeof(greeting));
const helloBob = `hi ${brendan}!`;
console.log(helloBob);

//boolean
//false : 0, nullm undefined, NaN, ''
//true : any other value
const canRead = true;
const test = 3 < 1; //false
console.log(`value : ${canRead}, type: ${typeof canRead}`);
console.log(`value : ${test}, type: ${typeof test}`);

//null - 값이 할당은 되어있음
let nothing = null;
console.log(`value : ${nothing}, type : ${typeof nothing}`);

//undefined - 값이 할당되어 있지 않음
let notX;
console.log(`value: ${notX}, type : ${typeof notX}`);

//symbol, create unique identifiers for objects
//고유한 식별자를 만들기 위함
const symbol1 = Symbol('id');
const symbol2 = Symbol('id');
console.log(symbol1 === symbol2);
//symbol은 바로 출력할 수가 없어서 .description으로 바꿔주어 출력해야 한다.

//object, real-life object, data structures
const ellie = {name:'ellie', age:20}; //const때문에 다른 object로 변결할 수 없다.
ellie.age = 21; //값을 재할당해주어 변경할 수 있다.
console.log(ellie.age);

//5. Dynamic typing : dynamically typed language
let text = 'hello';
console.log(text.charAt(0));
console.log(`value : ${text}, type: ${typeof text}`); //String
text = 1;
console.log(`value : ${text}, type: ${typeof text}`); //number
text = '7'+5;
console.log(`value : ${text}, type: ${typeof text}`); //값이 75로 나오지만 String
text = '8' / '2';
console.log(`value : ${text}, type: ${typeof text}`); //계산해버림 number
//이제 number가 되버려서 console.log(text.charAt(0)); 오류난다.
//그래서 TS(타임 스크립트) 기술이 나오게 됨 --> 브라우저로 실시간으로 볼수는 없음